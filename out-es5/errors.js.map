{"version":3,"sources":["../out/errors.js"],"names":["Object","defineProperty","exports","value","errors","serviceUrlCanntNull","serviceName","msg","Error","unexpectedNullResult","unexpectedNullValue","name","argumentNull","fieldNull","field","itemName","instanceMessangerStart","notSupportedInNode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB;AACbC,EAAAA,mBADa,+BACOC,WADP,EACoB;AAC7B,QAAIC,GAAG,sBAAeD,WAAf,6BAAP;AACA,WAAO,IAAIE,KAAJ,CAAUD,GAAV,CAAP;AACH,GAJY;AAKbE,EAAAA,oBALa,kCAKU;AACnB,QAAIF,GAAG,+BAAP;AACA,WAAO,IAAIC,KAAJ,CAAUD,GAAV,CAAP;AACH,GARY;AASbG,EAAAA,mBATa,+BASOC,IATP,EASa;AACtB,QAAIJ,GAAG,sBAAeI,IAAf,+BAAP;AACA,WAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH,GAZY;AAabK,EAAAA,YAba,wBAaAD,IAbA,EAaM;AACf,QAAIJ,GAAG,sBAAeI,IAAf,0BAAP;AACA,WAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH,GAhBY;AAiBbM,EAAAA,SAjBa,qBAiBHC,KAjBG,EAiBIC,QAjBJ,EAiBc;AACvB,QAAIR,GAAG,aAAMQ,QAAN,cAAkBD,KAAlB,4BAAP;AACA,WAAO,IAAIN,KAAJ,CAAUD,GAAV,CAAP;AACH,GApBY;AAqBbS,EAAAA,sBArBa,oCAqBY;AACrB,QAAIT,GAAG,iCAAP;AACA,WAAO,IAAIC,KAAJ,CAAUD,GAAV,CAAP;AACH,GAxBY;AAyBbU,EAAAA,kBAzBa,gCAyBQ;AACjB,QAAIV,GAAG,uCAAP;AACH;AA3BY,CAAjB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.errors = {\r\n    serviceUrlCanntNull(serviceName) {\r\n        let msg = `Service '${serviceName}' base url can not null.`;\r\n        return new Error(msg);\r\n    },\r\n    unexpectedNullResult() {\r\n        let msg = `Null result is unexpected.`;\r\n        return new Error(msg);\r\n    },\r\n    unexpectedNullValue(name) {\r\n        let msg = `variable ${name} is unexpected null value.`;\r\n        return new Error(msg);\r\n    },\r\n    argumentNull(name) {\r\n        let msg = `Arugment ${name} cannt null or empty.`;\r\n        return new Error(msg);\r\n    },\r\n    fieldNull(field, itemName) {\r\n        let msg = `${itemName} ${field} cannt be null or empty`;\r\n        return new Error(msg);\r\n    },\r\n    instanceMessangerStart() {\r\n        let msg = `Instance messanger is start.`;\r\n        return new Error(msg);\r\n    },\r\n    notSupportedInNode() {\r\n        let msg = `Not implement in node environment.`;\r\n    }\r\n};\r\n"],"file":"errors.js"}